{"version":3,"sources":["components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","id","username","_this2","url","concat","fetch","then","res","json","data","setState","name","avatar","avatar_url","repos","public_repos","followers","following","homeUrl","html_url","notFound","message","catch","error","console","log","fetchProfile","react_default","a","createElement","Card_Profile","Component","Profile","repositories","className","href","target","title","src","alt","React","App","components_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4LAEMA,qBACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACGQ,MAAQ,CACXC,GAAI,GAEJC,SAAU,YALCT,4EAQFS,GAAU,IAAAC,EAAAP,KAGjBQ,EAAG,GAAAC,OADK,+BACL,KAAAA,OAAaH,GACpBI,MAAMF,GACHG,KAAK,SAACC,GAAD,OAASA,EAAIC,SAClBF,KAAK,SAACG,GACLP,EAAKQ,SAAS,CACZV,GAAI,GACJW,KAAMF,EAAKE,KACXC,OAAQH,EAAKI,WACbC,MAAOL,EAAKM,aACZC,UAAWP,EAAKO,UAChBC,UAAWR,EAAKQ,UAChBC,QAAST,EAAKU,SACdC,SAAUX,EAAKY,YAGlBC,MAAM,SAACC,GAAD,OAAWC,QAAQC,IAAI,sEAGhC9B,KAAK+B,aAAa/B,KAAKI,MAAME,2CAK7B,OAEA0B,EAAAC,EAAAC,cAAA,WACOF,EAAAC,EAAAC,cAACC,EAAD,CAASrB,KAAMd,KAAKI,gBAtClBgC,cA6CPC,mLAEF,IAAIvB,EAAOd,KAAKJ,MAAMkB,KAClBO,EAAS,GAAAZ,OAAMK,EAAKS,QAAX,cACTe,EAAY,GAAA7B,OAAMK,EAAKS,QAAX,qBACZD,EAAS,GAAAb,OAAMK,EAAKS,QAAX,cACZ,MAAsB,cAAlBT,EAAKW,SAELO,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACZP,EAAAC,EAAAC,cAAA,4DAIJF,EAAAC,EAAAC,cAAA,WAASK,UAAU,QACjBP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,cACFF,EAAAC,EAAAC,cAAA,KAAGM,KAAM1B,EAAKS,QAASkB,OAAO,MAAMC,MAAO5B,EAAKE,MAAQF,EAAKR,UAAU0B,EAAAC,EAAAC,cAAA,OAAKS,IAAK7B,EAAKG,OAAQ2B,IAAK9B,EAAKR,aAEtG0B,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBACfP,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGM,KAAM1B,EAAKS,QAASkB,OAAO,MAAMC,MAAO5B,EAAKR,UAAWQ,EAAKE,MAAQF,EAAKR,aAGnF0B,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBACbP,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,KAAGM,KAAMnB,EAAWoB,OAAO,OAAMT,EAAAC,EAAAC,cAAA,SAAIpB,EAAKO,WAAcW,EAAAC,EAAAC,cAAA,2BAE3DF,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,KAAGM,KAAMF,EAAcG,OAAO,OAAMT,EAAAC,EAAAC,cAAA,SAAIpB,EAAKK,OAAUa,EAAAC,EAAAC,cAAA,8BAE1DF,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,KAAGM,KAAMlB,EAAWmB,OAAO,OAAMT,EAAAC,EAAAC,cAAA,SAAIpB,EAAKQ,WAAcU,EAAAC,EAAAC,cAAA,qCA/BpDW,IAAMT,WA0CnBzC,IC3EAmD,mLARX,OACId,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACa,EAAD,cAJUX,aCQEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.9ad63e2d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Card extends Component {\n    constructor(props) {\n      super(props);\n          this.state = {\n            id: '',\n            // Github username\n            username: 'ericv032',\n          }\n        }\n        fetchProfile(username) { \n          //https://api.github.com/\n          const API = 'https://api.github.com/users';\n          let url = `${API}/${username}`;\n          fetch(url)\n            .then((res) => res.json() )\n            .then((data) => {\n              this.setState({\n                id: '',\n                name: data.name,\n                avatar: data.avatar_url,\n                repos: data.public_repos,\n                followers: data.followers,\n                following: data.following,\n                homeUrl: data.html_url,\n                notFound: data.message\n              })\n            })\n            .catch((error) => console.log('Something went wrong') )\n        }\n        componentDidMount() {\n          this.fetchProfile(this.state.username);\n        }\n        \n        render() {\n          \n          return(\n        \n          <div>\n                 <Profile data={this.state} />\n            </div>\n          );\n        }\n      }\n      \n        \n      class Profile extends React.Component {\n        render() {\n          let data = this.props.data;\n          let followers = `${data.homeUrl}/followers`;\n          let repositories = `${data.homeUrl}?tab=repositories`;\n          let following = `${data.homeUrl}/following`;\n           if (data.notFound === 'Not Found')\n            return (\n               <div className=\"not-found\">\n                  <h1>Hmmm!! Username not found. Please try again!!</h1>\n               </div>\n            );\n            return (\n              <section className=\"card\">\n                <div>\n                  <figure>\n                <a href={data.homeUrl} target=\"new\" title={data.name || data.username}><img src={data.avatar} alt={data.username}/></a>\n                  </figure>\n                  <div className=\"profile-name\">\n                  <h1><a href={data.homeUrl} target=\"new\" title={data.username}>{data.name || data.username}</a></h1>\n                  </div>\n                </div> \n                <div className=\"profile-info\">\n                  <ul>\n                     <li>\n                        <a href={followers} target=\"new\"><i>{data.followers}</i><span>Followers</span></a>\n                     </li>\n                     <li>\n                        <a href={repositories} target=\"new\"><i>{data.repos}</i><span>Repositories</span></a>\n                     </li>\n                     <li>\n                        <a href={following} target=\"new\"><i>{data.following}</i><span>Following</span></a>\n                     </li>\n                  </ul>\n                </div>\n              </section>\n            );\n        }\n      }\n\n  \n\nexport default Card;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Card from './components/Card';\n\nclass App extends Component {\n  render() {\n    return (\n        <div>\n        <Card />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}